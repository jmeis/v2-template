---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: docker-signing-task
spec:
  inputs:
    params:
    - name: task-pvc
      description: pipeline pvc name place holder
    - name: app-name
      description: The name of your app
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'ic iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: build_signer
      description: current signer
    - name: registry-namespace
      description: The registry namespace
    - name: registry-region
      description: the registry region
    - name: vault_name
      decription: the key protect instance name
    - name: resource-group
      description: the resource group
    - name: clusterName
      description: the name of the targeted cluster
    - name: region
      description: target region
    - name: api_endpoint
      description: api endpoint
      default: https://cloud.ibm.com
    - name: working_dir
      default: "/root"
    - name: mount-path
      description: mount path directory 
      default: /artifacts
    - name: volume
      description: volume mount name
      default: task-volume
  steps:
  - name: sign-image
    image: ibmcom/pipeline-base-image:latest
    env:
    - name: IBM_CLOUD_API_KEY
      value: $(inputs.params.api-key)
    - name: API
      value: $(inputs.params.api_endpoint)
    - name: HOME
      value: $(inputs.params.working_dir)
    - name: REGISTRY_NAMESPACE
      value: $(inputs.params.registry-namespace)
    - name: VAULT_INSTANCE
      value: $(inputs.params.vault_name)
    - name: DEVOPS_SIGNER
      value: $(inputs.params.build_signer)
    - name: IBMCLOUD_TARGET_RESOURCE_GROUP
      value: $(inputs.params.resource-group)
    - name: REGISTRY_REGION
      value: $(inputs.params.registry-region)
    - name: IBMCLOUD_TARGET_REGION
      value: $(inputs.params.region)
    - name: BUILD_CLUSTER
      value: $(inputs.params.clusterName)
    - name: ARCHIVE_DIR
      value: $(inputs.params.mount-path)
    - name: IMAGE_NAME
      value: $(inputs.params.app-name)
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/add_docker.sh")
      source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/setup_dind.sh")
      # configure the container registry
      REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
      ibmcloud cr region-set $REGISTRY_REGION
      ibmcloud cr login
      export REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
      export DOCKER_CONTENT_TRUST_SERVER="https://$REGISTRY_URL:4443"
      source "$ARCHIVE_DIR"/build.properties
      IMAGE_TAG=$IMAGE_TAGS
      echo "CHECKING $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
      docker trust inspect "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
      

      #Required Parameters
      # $VAULT_INSTANCE - name of vault
      # $IBMCLOUD_TARGET_REGION - region hosting Key Protect Vault instance
      # $IBMCLOUD_TARGET_RESOURCE_GROUP of the Key Protect Vault Instance
      # $REGISTRY_NAMESPACE namespace of registry
      # $IMAGE_NAME
      # $IMAGE_TAG
      # $DEVOPS_SIGNER - current signer
      
      echo "Vault instance $VAULT_INSTANCE used to retrieve signing keys"
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/signing_utils.sh")
      # Restore signer pem key
      VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
      JSON_DATA="$(readData "$REGISTRY_NAMESPACE.keys" "$VAULT_DATA")"
      signerkey=$(getJSONValue "$DEVOPS_SIGNER" "$JSON_DATA")
      writeFile "$signerkey"
      # Retrieve the signer passphrase
      export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(getJSONValue "passphrase" "$signerkey")
      
      # Pull the image
      #TODO support multiple signatures. This requires knowing if there is already a signature present. 
      #Need to set DOCKER_CONTENT_TRUST=1 before the image pull if singture present
      docker pull "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
      # Sign the image
      export DOCKER_CONTENT_TRUST=1
      docker trust sign "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME:$IMAGE_TAG"
      docker trust inspect --pretty "$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
    volumeMounts:
    - mountPath: $(inputs.params.mount-path)
      name: $(inputs.params.volume)
  volumes:
  - name: $(inputs.params.volume)
    persistentVolumeClaim:
      claimName: $(inputs.params.task-pvc)
