---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline
spec:
  params:
    - name: registry-namespace
      description: The namespace in the container image registry. You can set it up
        with {bx cr namespace-add]. Learn more at
        https://cloud.ibm.com/docs/services/Registry?topic=registry-getting-started#getting-started.
    - name: repository
      description: The git repo
    - name: app-name
      description: The name of your app
    - name: revision
      description: the branch for the git repo
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: branch
      description: the branch for the git repo
      default: "master"
    - name: cluster-name
      description: the name of the cluster to target
    - name: dev-cluster-namespace
      description: the namespace
    - name: repository-integration
      description: the repo integration name
    - name: validation-signer
      description: validation signer
    - name: vault-name
      description: Specify the Key Protect instance name, where the image signing keys
        have been stored. The build and validation signer fields contain default names
        for these signers. The values must match the values created in the Key-Management-Admin-Template.
        See https://github.com/open-toolchain/key-management-admin-toolchain
    - name: dev-resource-group
      description: Resource Group
    - name: dev-region
      description: target region
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: evidence-repo
      description: evidence repo
    - name: issues-repo
      description: incident issues repo
    - name: commit-id
      description: commit id
    - name: pr-url
      description: pr url
      default: ""
    - name: inventory-repo
      description: inventory repository owner and name
    - name: version
      description: cr branch name

  workspaces:
    - name: artifacts

  tasks:
    - name: code-extract-toolchain-crn
      taskRef:
        name: toolchain-extract-value
      params:
        - name: expression
          value: ".crn"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-fetch-credentials
      runAfter:
        - code-extract-toolchain-crn
      taskRef:
        name: git-get-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: ibmcloud-api-key
          value: $(params.api-key)
        - name: repository
          value: $(params.repository)
        - name: repository-integration
          value: $(params.repository-integration)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-save-git-token
      runAfter:
        - code-fetch-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      taskSpec:
        params:
          - name: pipeline-debug
        workspaces:
          - name: artifacts
            mountPath: /artifacts
        stepTemplate:
          env:
            - name: PIPELINE_DEBUG
              value: $(params.pipeline-debug)
        steps:
          - name: save-git-token-to-file
            image: ibmcom/pipeline-base-image:2.6
            workingDir: "/artifacts"
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -e -o pipefail

                if [ $PIPELINE_DEBUG == 1 ]; then
                  pwd
                  env
                  trap env EXIT
                  set -x
                fi

                source ./build.properties
                echo -n $GIT_TOKEN > ./github-token

    - name: code-fetch-evidence-locker
      runAfter:
        - code-fetch-credentials
      taskRef:
        name: git-clone
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.evidence-repo)
        - name: branch
          value: "master"
        - name: directory-name
          value: evidence-locker
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-fetch-code
      runAfter:
        - code-fetch-credentials
      taskRef:
        name: git-clone
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: revision
          value: $(params.commit-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-doi-publish-buildrecord
      taskRef:
        name: doi-publish-buildrecord
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: git-repository
          value: $(params.repository)
        - name: git-branch
          value: $(params.branch)
        - name: git-commit
          value: $(tasks.code-fetch-code.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests
      runAfter:
        - code-fetch-code
      taskRef:
        name: util-run
      workspaces:
        - name: scripts
          workspace: artifacts
      params:
        - name: script
          value: . /root/.nvm/nvm.sh && cd /scripts/$(echo $(params.repository) | sed -E "s/(.*)(\/)//") && npm ci -q && npm run test

    - name: code-unit-tests-create-issue
      runAfter:
        - code-unit-tests
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: task-name
          value: "code-unit-tests"
        - name: result-status
          value: $(tasks.code-unit-tests.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-unit-tests-create-evidence
      runAfter:
        - code-fetch-evidence-locker
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: "evidence-locker"
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "unit-test"
        - name: toolchain-crn
          value: $(tasks.code-extract-toolchain-crn.results.extracted-value)
        - name: evidence-type
          value: "com.ibm.unit_test"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.code-unit-tests.results.status)
        - name: issues
          value: |
            "$(tasks.code-unit-tests-create-issue.results.issue-url)"

    - name: code-unit-tests-create-doi-data
      runAfter:
        - code-unit-tests
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "Unit tests"
        - name: task-name
          value: "code-unit-tests"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.code-unit-tests.results.status)

    - name: code-unit-tests-results-to-doi
      runAfter:
        - code-unit-tests-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.code-unit-tests-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.code-unit-tests-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan-uploader
      runAfter:
        - code-unit-tests
      taskRef:
        name: gitsecure-discovery
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: commit-id
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-vulnerability-scan
      runAfter:
        - code-vulnerability-scan-uploader
      taskRef:
        name: gitsecure-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: api-key
          value: $(params.api-key)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-vulnerability-scan-show-artifact
      runAfter:
        - code-vulnerability-scan
      taskRef:
        name: log-artifact
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: artifact-path
          value: $(tasks.code-vulnerability-scan.results.evidence-store)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan-create-issue
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: task-name
          value: "code-vulnerability-scan"
        - name: result-status
          value: $(tasks.code-vulnerability-scan.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-vulnerability-scan-create-evidence
      runAfter:
        - code-unit-tests-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.code-fetch-evidence-locker.results.directory-name)
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "code-vulnerability-scan"
        - name: toolchain-crn
          value: $(tasks.code-extract-toolchain-crn.results.extracted-value)
        - name: evidence-type
          value: "com.ibm.code-vulnerability-scan"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.code-vulnerability-scan.results.status)
        - name: issues
          value: |
            "$(tasks.code-vulnerability-scan-create-issue.results.issue-url)"

    - name: code-vulnerability-scan-create-doi-data
      runAfter:
        - code-vulnerability-scan
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "GitSecure vulnerability scan"
        - name: task-name
          value: "code-vulnerability-scan"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.code-vulnerability-scan.results.status)

    - name: code-vulnerability-scan-results-to-doi
      runAfter:
        - code-vulnerability-scan-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.code-vulnerability-scan-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.code-vulnerability-scan-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check
      taskRef:
        name: gitsecure-cis-check
      runAfter:
        - code-vulnerability-scan-uploader
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: api-key
          value: $(params.api-key)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-cis-check-show-artifact
      runAfter:
        - code-cis-check
      taskRef:
        name: log-artifact
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: artifact-path
          value: $(tasks.code-cis-check.results.evidence-store)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check-create-issue
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: task-name
          value: "code-cis-check"
        - name: result-status
          value: $(tasks.code-cis-check.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-cis-check-create-evidence
      runAfter:
        - code-vulnerability-scan-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.code-fetch-evidence-locker.results.directory-name)
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "code-cis-check"
        - name: toolchain-crn
          value: $(tasks.code-extract-toolchain-crn.results.extracted-value)
        - name: evidence-type
          value: "com.ibm.code-cis-check"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.code-cis-check.results.status)
        - name: issues
          value: |
            "$(tasks.code-cis-check-create-issue.results.issue-url)"

    - name: code-cis-check-create-doi-data
      runAfter:
        - code-cis-check
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "GitSecure CIS check"
        - name: task-name
          value: "code-cis-check"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.code-cis-check.results.status)

    - name: code-cis-check-results-to-doi
      runAfter:
        - code-cis-check-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.code-cis-check-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.code-cis-check-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-bom-check
      runAfter:
        - code-vulnerability-scan-uploader
      taskRef:
        name: gitsecure-bom-check
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: api-key
          value: $(params.api-key)
        - name: commit-id
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-bom-check-show-artifact
      runAfter:
        - code-bom-check
      taskRef:
        name: log-artifact
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: artifact-path
          value: $(tasks.code-bom-check.results.evidence-store)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-bom-check-create-issue
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: task-name
          value: "code-bom-check"
        - name: result-status
          value: $(tasks.code-bom-check.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)

    - name: code-bom-check-create-evidence
      runAfter:
        - code-cis-check-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: $(tasks.code-fetch-evidence-locker.results.directory-name)
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "code-bom-check"
        - name: toolchain-crn
          value: $(tasks.code-extract-toolchain-crn.results.extracted-value)
        - name: evidence-type
          value: "com.ibm.code-bom-check"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.code-bom-check.results.status)
        - name: issues
          value: |
            "$(tasks.code-bom-check-create-issue.results.issue-url)"

    - name: code-bom-check-create-doi-data
      runAfter:
        - code-bom-check
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "GitSecure BOM check"
        - name: task-name
          value: "code-bom-check"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.code-bom-check.results.status)

    - name: code-bom-check-results-to-doi
      runAfter:
        - code-bom-check-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.code-bom-check-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.code-bom-check-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection
      taskRef:
        name: compliance-check-github-statuses
      runAfter:
        - code-save-git-token
        - code-fetch-code
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: target-branch
          value: $(params.branch)
        - name: repository-integration
          value: $(params.repository-integration)
        - name: required-checks
          value: |
            [{
              "type": "branch-protection",
              "name": "code-review",
              "params": {
                "checks": [
                  "tekton/code-branch-protection",
                  "tekton/code-unit-tests",
                  "tekton/code-cis-check",
                  "tekton/code-vulnerability-scan"
                ]
              }
            }]
        - name: collect-evidence
          value: "false"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-create-issue
      runAfter:
        - code-branch-protection
      taskRef:
        name: evidence-create-incident-issue
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: task-name
          value: code-branch-protection
        - name: result-status
          value: $(tasks.code-branch-protection.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-create-evidence
      runAfter:
        - code-bom-check-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      workspaces:
        - name: evidence-locker
          workspace: artifacts
      params:
        - name: evidence-repo-path
          value: "evidence-locker"
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "github-status-checks"
        - name: evidence-type
          value: "com.ibm.branch_protection"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: $(tasks.code-branch-protection.results.status)
        - name: issues
          value: |
            "$(tasks.code-branch-protection-create-issue.results.issue-url)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: toolchain-crn
          value: $(tasks.code-extract-toolchain-crn.results.extracted-value)

    - name: code-branch-protection-create-doi-data
      runAfter:
        - code-branch-protection
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "Branch protection check"
        - name: task-name
          value: "code-branch-protection"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.code-branch-protection.results.status)

    - name: code-branch-protection-results-to-doi
      runAfter:
        - code-branch-protection-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.code-branch-protection-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.code-branch-protection-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-check-dockerfile
      runAfter:
        - code-fetch-code
      taskRef:
        name: icr-check-dockerfile
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-directory
          value: $(tasks.code-fetch-code.results.directory-name)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-containerize
      taskRef:
        name: icr-cr-build
      runAfter:
        - code-check-dockerfile
      workspaces:
        - name: source
          workspace: artifacts
      params:
        - name: registry-region
          value: $(params.registry-region)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: image-name
          value: $(params.app-name)
        - name: additional-tags-script
          value: |
            # The script is providing tag(s) as output
            # But logs can be written as error stderr
            echo "Providing an image tag including git branch and commit" >&2
            # Add a specific tag with branch and commit
            echo "$(date +%Y%m%d%H%M%S)-$(tasks.code-fetch-code.results.git-branch)-$(tasks.code-fetch-code.results.git-commit)"
        - name: container-registry-apikey-secret-key
          value: api-key
        - name: path-to-context
          value: "$(tasks.code-fetch-code.results.directory-name)"
        - name: path-to-dockerfile
          value: "./$(tasks.code-fetch-code.results.directory-name)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-update-inventory
      taskRef:
        name: inventory-update-version
      runAfter:
        - build-containerize
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: inventory-repo
          value: $(params.inventory-repo)
        - name: version
          value: $(params.version)
        - name: repository
          value: $(params.app-name)

    - name: build-vulnerability-advisor
      taskRef:
        name: icr-check-va-scan
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: image-url
          value: $(tasks.build-containerize.results.image-repository)
        - name: image-digest
          value: $(tasks.build-containerize.results.image-digest)
        - name: scan-report-file
          value: 'app-image-va-report.json'
        - name: ibmcloud-api-key
          value: $(params.api-key)
        # - name: maxIteration
        #   value: '5'
        # - name: sleepTime
        #   value: '3'
        # - name: failOnScannedIssues
        #   value: 'false'
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-vulnerability-advisor-show-artifact
      runAfter:
        - build-vulnerability-advisor
      taskRef:
        name: log-artifact
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: artifact-path
          value: $(tasks.build-vulnerability-advisor.results.scan-report-file)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-vulnerability-advisor-result-adapter
      runAfter:
        - build-vulnerability-advisor
      taskRef:
        name: va-scan-result-adapter
      params:
        - name: scan-status
          value: $(tasks.build-vulnerability-advisor.results.scan-status)

    - name: build-vulnerability-advisor-create-issue
      taskRef:
        name: evidence-create-incident-issue
      runAfter:
        - code-save-git-token
        - build-vulnerability-advisor-result-adapter
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: task-name
          value: icr-check-va-scan
        - name: result-status
          value: $(tasks.build-vulnerability-advisor-result-adapter.results.status)
        - name: commit-hash
          value: $(tasks.code-fetch-code.results.git-commit)
        - name: repository
          value: $(params.repository)
        - name: incident-issue-repo
          value: $(params.issues-repo)
        - name: secret-name
          value: github-token

    - name: build-vulnerability-advisor-create-evidence
      runAfter:
        - build-vulnerability-advisor-result-adapter
        - build-vulnerability-advisor-create-issue
        - code-branch-protection-create-evidence
      taskRef:
        name: evidence-add
      retries: 2
      params:
        - name: evidence-repo-path
          value: "evidence-locker"
        - name: namespace
          value: "ci"
        - name: evidence-name
          value: "build-vulnerability-advisor"
        - name: evidence-type
          value: "com.ibm.cloud.icr-check-va-scan"
        - name: evidence-type-version
          value: "1.0.0"
        - name: result
          value: "$(tasks.build-vulnerability-advisor-result-adapter.results.status)"
        - name: issues
          value: |
            "$(tasks.build-vulnerability-advisor-create-issue.results.issue-url)"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
      workspaces:
        - name: evidence-locker
          workspace: artifacts

    - name: build-vulnerability-advisor-create-doi-data
      runAfter:
        - build-vulnerability-advisor-result-adapter
      taskRef:
        name: evidence-to-doi-transformer
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: title
          value: "IBM CR VA scan"
        - name: task-name
          value: "build-vulnerability-advisor"
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: result-status
          value: $(tasks.build-vulnerability-advisor-result-adapter.results.status)

    - name: build-vulnerability-advisor-results-to-doi
      runAfter:
        - build-vulnerability-advisor-create-doi-data
      taskRef:
        name: doi-publish-testrecord
      retries: 2
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: "$(params.app-name)[$(params.branch)]"
        - name: file-locations
          value: $(tasks.build-vulnerability-advisor-create-doi-data.results.file-locations)
        - name: test-types
          value: $(tasks.build-vulnerability-advisor-create-doi-data.results.test-types)
        - name: toolchain-apikey-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-docker-image-sign
      runAfter:
        - build-vulnerability-advisor
      taskRef:
        name: dct-sign
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-name
          value: $(params.app-name)
        - name: api-key
          value: $(params.api-key)
        - name: validation-signer
          value: $(params.validation-signer)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: registry-region
          value: $(params.registry-region)
        - name: vault-name
          value: $(params.vault-name)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: region
          value: $(params.dev-region)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-fetch-iks-cluster-config
      runAfter:
        - build-docker-image-sign
      taskRef:
        name: iks-fetch-config
      workspaces:
        - name: cluster-configuration
          workspace: artifacts
      params:
        - name: ibmcloud-api-key
          value: $(params.api-key)
        - name: cluster-name
          value: $(params.cluster-name)
        - name: resource-group
          value: $(params.dev-resource-group)
        - name: cluster-region
          value: $(params.dev-region)
        - name: cluster-pipeline-resources-directory-fallback
          value: .tekton-clusters
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-pipeline-1-kubectl-task
      runAfter:
        - build-fetch-iks-cluster-config
      taskRef:
        name: iks-contextual-execution
      workspaces:
        - name: cluster-configuration
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster-name)
        - name: cluster-pipeline-resources-directory
          value: .tekton-clusters
        - name: script
          value: |
            echo "** Here is the kubectl version:"
            kubectl version
            echo "** Here is the kubectl cluster-info:"
            kubectl cluster-info
            echo "** Here are the kubectl namespaces:"
            kubectl get namespaces
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-create-namespace
      runAfter:
        - build-docker-image-sign
      taskRef:
        name: iks-create-namespace
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster-name)
        - name: cluster-region
          value: $(params.dev-region)
        - name: cluster-namespace
          value: $(params.dev-cluster-namespace)
        - name: ibmcloud-api-key-secret-key
          value: "api-key"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-create-image-pull-secrets
      runAfter:
        - build-create-namespace
      taskRef:
        name: iks-create-pull-secrets
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster-name)
        - name: cluster-region
          value: $(params.dev-region)
        - name: cluster-namespace
          value: $(params.dev-cluster-namespace)
        - name: ibmcloud-api-key-secret-key
          value: "api-key"
        - name: image-url
          value: $(tasks.build-containerize.results.image-repository)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-deploy-dev
      taskRef:
        name: iks-deploy
      runAfter:
        - build-pipeline-1-kubectl-task
        - build-create-namespace
        - build-create-image-pull-secrets
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: cluster-name
          value: $(params.cluster-name)
        - name: cluster-namespace
          value: $(params.dev-cluster-namespace)
        - name: cluster-region
          value: $(params.registry-region)
        - name: app-directory
          value: $(tasks.code-fetch-code.results.directory-name)
        - name: image-tags
          value: $(tasks.build-containerize.results.image-tags)
        - name: image-url
          value: $(tasks.build-containerize.results.image-repository)
        - name: ibmcloud-api-key
          value: $(params.api-key)
        - name: allow-create-route
          value: "true"
        - name: build-properties
          value: ""
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: build-pipeline-evaluator
      runAfter:
        - build-deploy-dev
      taskRef:
        name: util-evaluate-pipeline-results
      params:
        - name: results
          value: |
            [
              {
                "name": "run-unit-tests",
                "expected": "success",
                "actual": "$(tasks.code-unit-tests.results.status)"
              },
              {
                "name": "code-vulnerability-scan",
                "expected": "success",
                "actual": "$(tasks.code-vulnerability-scan.results.status)"
              },
              {
                "name": "code-cis-check",
                "expected": "success",
                "actual": "$(tasks.code-cis-check.results.status)"
              },
              {
                "name": "code-bom-check",
                "expected": "success",
                "actual": "$(tasks.code-bom-check.results.status)"
              },
              {
                "name": "check-github-statuses",
                "expected": "success",
                "actual": "$(tasks.code-branch-protection.results.status)"
              },
              {
                "name": "vulnerability-advisor",
                "expected": "OK",
                "actual": "$(tasks.build-vulnerability-advisor.results.scan-status)"
              }
            ]
