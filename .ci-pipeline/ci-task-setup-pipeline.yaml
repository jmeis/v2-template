---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: code-setup-pipeline-env
spec:
  params:
    - name: one-pipeline-config-branch
    - name: one-pipeline-config-repo
    - name: repository
      default: ""
    - name: repository-branch
    - name: pipeline-debug
      default: "0"
  results:
    - name: toolchain-id
    - name: repository-url
    - name: evidence-repo-url
    - name: issues-repo-url
    - name: inventory-repo-url
    - name: one-pipeline-repo-url
    - name: one-pipeline-repo-branch
    - name: gh-org
  volumes:
    - name: cd-config
      configMap:
        name: toolchain
  steps:
    - name: setup
      image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6@sha256:7f588468622a981f89cf5e1212aaf75fface9da6169b5345ca52ab63d8215907
      volumeMounts:
        - name: cd-config
          mountPath: /cd-config
      env:
        - name: ONE_PIPELINE_CONFIG_BRANCH
          value: $(params.one-pipeline-config-branch)
        - name: ONE_PIPELINE_CONFIG_REPO
          value: $(params.one-pipeline-config-repo)
        - name: APP_REPO_BRANCH
          value: $(params.repository-branch)
        - name: REPOSITORY
          value: $(params.repository)
        - name: PIPELINE_DEBUG
          value: $(params.pipeline-debug)
      script: |
        #!/bin/bash

        if [[ "$PIPELINE_DEBUG" == 1 ]]; then
          trap env EXIT
          set -x
        fi

        if [[ "${REPOSITORY}" ]]; then
          echo "REPOSITORY $REPOSITORY"
          APP_REPO=$REPOSITORY
        else
          APP_REPO=$(jq -j '.services[] | select(.toolchain_binding.name=="app-repo") | .dashboard_url' /cd-config/toolchain.json)
        fi
        ONE_PIPELINE_REPO="${ONE_PIPELINE_CONFIG_REPO:=$APP_REPO}"
        ONE_PIPELINE_BRANCH="${ONE_PIPELINE_CONFIG_BRANCH:=$APP_REPO_BRANCH}"

        echo -n "$APP_REPO" > "$(results.repository-url.path)"
        echo -n "$ONE_PIPELINE_REPO" > "$(results.one-pipeline-repo-url.path)"
        echo -n "$ONE_PIPELINE_BRANCH" > "$(results.one-pipeline-repo-branch.path)"

        jq -j '.crn' /cd-config/toolchain.json > $(results.toolchain-id.path)
        jq -j '.services[] | select(.toolchain_binding.name=="app-repo") | .dashboard_url | split("/")[3]' /cd-config/toolchain.json > $(results.gh-org.path)
        jq -j '.services[] | select(.toolchain_binding.name=="evidence-repo") | .dashboard_url' /cd-config/toolchain.json > $(results.evidence-repo-url.path)
        jq -j '.services[] | select(.toolchain_binding.name=="issues-repo") | .dashboard_url' /cd-config/toolchain.json > $(results.issues-repo-url.path)
        jq -j '.services[] | select(.toolchain_binding.name=="inventory-repo") | .dashboard_url' /cd-config/toolchain.json > $(results.inventory-repo-url.path)
