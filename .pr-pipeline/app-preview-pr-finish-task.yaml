---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: app-preview-pr-finish
spec:
  params:
    - name: compliance-baseimage
      description: base image to run most of the built-in pipeline code
    - name: containerize-state
      description: Succeeded | Failed
    - name: scan-artifact-state
      description: Succeeded | Failed
    - name: app-preview-state
      description: Succeeded | Failed
    - name: acceptance-tests-state
      description: Succeeded | Failed
    - name: pr-pipeline-state
      description: Succeeded | Failed
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"

  workspaces:
    - name: artifacts
      mountPath: /artifacts

  volumes:
    - name: one-pipeline
      emptyDir: {}
    - name: pipelinectl
      emptyDir: {}
    - name: config
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
    - name: environment-properties
      configMap:
        name: environment-properties
    - name: secure-properties
      secret:
        secretName: secure-properties
    - name: toolchain
      configMap:
        name: toolchain

  stepTemplate:
    env:
      - name: ONE_PIPELINE_PATH
        value: "/opt/one-pipeline"
      - name: WORKSPACE
        value: "$(workspaces.artifacts.path)"
      - name: PIPELINE_RUN_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.labels['tekton.dev/pipelineRun']
      - name: PIPELINE_RUN_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/tekton-pipeline']
      - name: PIPELINE_RUN_URL
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-run-url']
      - name: BUILD_NUMBER
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
      - name: PIPELINE_ID
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
      - name: TRIGGER_TYPE
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-type']
      - name: TRIGGER_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/trigger-name']
      - name: TRIGGERED_BY
        valueFrom:
          fieldRef:
            fieldPath: metadata.annotations['devops.cloud.ibm.com/triggered-by']
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)
      - name: DOCKER_HOST
        value: tcp://localhost:2376
      - name: DOCKER_TLS_VERIFY
        value: '1'
      - name: DOCKER_CERT_PATH
        value: /certs/client

  steps:

    - name: prepare
      image: $(params.compliance-baseimage)
      workingDir: $(workspaces.artifacts.path)
      volumeMounts:
        - name: one-pipeline
          mountPath: /usr/share/one-pipeline
        - name: pipelinectl
          mountPath: /usr/share/cocoa
        - name: config
          mountPath: /config
        - name: environment-properties
          mountPath: /config/environment-properties
        - name: secure-properties
          mountPath: /config/secure-properties
        - name: toolchain
          mountPath: /toolchain

      script: |
        #!/bin/bash

        set -e

        if [[ "$PIPELINE_DEBUG" == 1 ]]; then
          set -x
          trap env EXIT
        fi

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/environment-properties' -type f)

        while read file; do
          ln -snf "$file" "/config/$(basename "$file")"
        done < <(find '/config/secure-properties' -type f)

        cp -r /opt/one-pipeline /usr/share
        cp -r /opt/cocoa/bin /usr/share/cocoa

    - name: app-preview-steps-checks
      image: $(params.compliance-baseimage)
      workingDir: $(workspaces.artifacts.path)
      volumeMounts:
        - name: one-pipeline
          mountPath: /opt/one-pipeline
        - name: pipelinectl
          mountPath: /opt/cocoa
        - name: config
          mountPath: /config
        - name: environment-properties
          mountPath: /config/environment-properties
        - name: secure-properties
          mountPath: /config/secure-properties
        - name: toolchain
          mountPath: /toolchain

      env:
        - name: CONTAINERIZE_STATE
          value: $(params.containerize-state)
        - name: SCAN_ARTIFACT_STATE
          value: $(params.scan-artifact-state)
        - name: APP_PREVIEW_STATE
          value: $(params.app-preview-state)
        - name: ACCEPTANCE_TESTS_STATE
          value: $(params.acceptance-tests-state)
        - name: PR_PIPELINE_STATE
          value: $(params.pr-pipeline-state)

      script: |
        #!/bin/bash

        set -e -o pipefail

        if [ "$PIPELINE_DEBUG" == 1 ]; then
          pwd
          env
          trap env EXIT
          set -x
        fi

        pipeline_data="${WORKSPACE}/pipeline.data"
        # shellcheck disable=SC1090
        source "$pipeline_data"

        export PATH="$PATH:/opt/cocoa/bin"

        cd "$WORKSPACE"

        if [ "${CONTAINERIZE_STATE}" = "Succeeded" ]; then
          CONTAINERIZE_STATE="success"
        else
          CONTAINERIZE_STATE="failure"
        fi

        if [ "${SCAN_ARTIFACT_STATE}" = "Succeeded" ]; then
          SCAN_ARTIFACT_STATE="success"
        else
          SCAN_ARTIFACT_STATE="failure"
        fi

        if [ "${APP_PREVIEW_STATE}" = "Succeeded" ]; then
          APP_PREVIEW_STATE="success"
        else
          APP_PREVIEW_STATE="failure"
        fi

        if [ "${ACCEPTANCE_TESTS_STATE}" = "Succeeded" ]; then
          ACCEPTANCE_TESTS_STATE="success"
        else
          ACCEPTANCE_TESTS_STATE="failure"
        fi

        if [ "${PR_PIPELINE_STATE}" = "Succeeded" ]; then
          PR_PIPELINE_STATE="success"
        else
          PR_PIPELINE_STATE="failure"
        fi

        . "${ONE_PIPELINE_PATH}"/tools/retry

        # Add status checks for the additional tasks for the App review PR pipeline
        # build-containerize
        . "${ONE_PIPELINE_PATH}"/internal/github/set_status \
          "${CONTAINERIZE_STATE}"  \
          "tekton/containerize" \
          "Containerization done." \
          "build-containerize" \
          "run-stage"

        # build-scan-artifact
        . "${ONE_PIPELINE_PATH}"/internal/github/set_status \
          "${SCAN_ARTIFACT_STATE}"  \
          "tekton/scan-artifact" \
          "Artifact(s) scanned." \
          "build-scan-artifact" \
          "run-stage"

        # deploy-app-preview
        . "${ONE_PIPELINE_PATH}"/internal/github/set_status \
          "${APP_PREVIEW_STATE}"  \
          "tekton/app-preview" \
          "Application preview deployed." \
          "deploy-app-preview" \
          "run-stage"

        # deploy-acceptance-tests
        . "${ONE_PIPELINE_PATH}"/internal/github/set_status \
          "${ACCEPTANCE_TESTS_STATE}"  \
          "tekton/acceptance-tests" \
          "Acceptance tests done." \
          "deploy-acceptance-tests" \
          "run-stage"

        # Send slack message using compliance-base-image script
        cat << EOF > /config/generate_app_preview_slack_message.py
        #!/usr/bin/env python3
        import json, os

        results = [
            {
              "name": "build-containerize",
              "expected": "success",
              "actual": os.getenv("CONTAINERIZE_STATE"),
            },
            {
              "name": "build-scan-artifact",
              "expected": "success",
              "actual": os.getenv("SCAN_ARTIFACT_STATE"),
            },
            {
              "name": "deploy-app-preview",
              "expected": "success",
              "actual": os.getenv("APP_PREVIEW_STATE"),
            },
            {
              "name": "deploy-acceptance-tests",
              "expected": "success",
              "actual": os.getenv("ACCEPTANCE_TESTS_STATE"),
            }
        ]

        print("Complementary Tasks in <" + str(os.getenv("PIPELINE_RUN_URL")) + " | App Preview PR Pipeline>")

        for result in results:
            if result["actual"] != result["expected"]:
                print(":x: Task \`{taskName}\` has failed.".format(taskName=result["name"]))
            else:
                print(":white_check_mark: Task \`{taskName}\` was successful.".format(taskName=result["name"]))

        EOF

        cat /config/generate_app_preview_slack_message.py
        chmod +x /config/generate_app_preview_slack_message.py

        "/config/generate_app_preview_slack_message.py" | "${ONE_PIPELINE_PATH}/internal/slack/post_message.py"
