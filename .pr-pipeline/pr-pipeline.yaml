---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-pipeline
spec:
  params:
    - name: pr-repository
    - name: branch
      description: branch
    - name: target-branch
      description: target branch
    - name: repository-integration
      description: the repo integration name
    - name: commit-id
      description: commit id
    - name: commit-timestamp
      description: the timestamp of when the commit pushed
    - name: slack-notifications
      description: toggles slack notifications
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: pr-url
      description: pr url
    - name: one-pipeline-config
      description: Configuration file to be used to customize pipeline behavior
      default: .one-pipeline.yaml
    - name: one-pipeline-config-repo
      description: repository url of the one-pipeline config
    - name: one-pipeline-config-branch
      description: the branch of the one-pipeline config

  workspaces:
    - name: artifacts

  tasks:
    - name: code-notify-pipeline-start
      when:
        - input: $(params.slack-notifications)
          operator: in
          values: ["1"]
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os

              print("PR Pipeline was Triggered By: " + os.getenv("TRIGGERED_BY"))
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + " | See the Pipeline Logs>")

    - name: code-setup-pipeline-env
      taskRef:
        name: code-setup-pipeline-env
      params:
        - name: one-pipeline-config-branch
          value: $(params.one-pipeline-config-branch)
        - name: one-pipeline-config-repo
          value: $(params.one-pipeline-config-repo)
        - name: repository-branch
          value: $(params.branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-fetch-credentials
      taskRef:
        name: git-get-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: repository-integration
          value: $(params.repository-integration)
        - name: ibmcloud-api-key-secret-key
          value: api-key
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: get-org
      runAfter:
        - code-fetch-credentials
      params:
        - name: pipeline-debug
          value: $(params.pipeline-debug)
        - name: repository
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
      taskSpec:
        params:
          - name: pipeline-debug
            default: "0"
          - name: repository
        results:
          - name: gh-org
        stepTemplate:
          env:
            - name: PIPELINE_DEBUG
              value: $(params.pipeline-debug)
        steps:
          - name: get-params
            image: ibmcom/pipeline-base-image:2.6
            script: |
              #!/bin/bash

              set -e -o pipefail

              if [ $PIPELINE_DEBUG == 1 ]; then
                pwd
                env
                trap env EXIT
                set -x
              fi

              OWNER=$(echo "$(params.repository)" | cut -d/ -f4 )
              echo -n $OWNER | tee $(results.gh-org.path)

    - name: code-fetch-code
      runAfter:
        - code-fetch-credentials
      taskRef:
        name: git-clone
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(params.pr-repository)
        - name: branch
          value: $(params.branch)
        - name: git-user
          value: $(tasks.code-fetch-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-clone-one-pipeline-config-repo
      taskRef:
        name: git-clone
      runAfter:
        - code-fetch-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(tasks.code-setup-pipeline-env.results.one-pipeline-repo-url)
        - name: branch
          value: $(tasks.code-setup-pipeline-env.results.one-pipeline-repo-branch)
        - name: directory-name
          value: "one-pipeline-config-repo"
        - name: git-user
          value: $(tasks.code-fetch-credentials.results.git-auth-user)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-normalize-config
      runAfter:
        - code-clone-one-pipeline-config-repo
      taskRef:
        name: normalize-config
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: working-dir
          value: $(tasks.code-clone-one-pipeline-config-repo.results.directory-name)
        - name: file
          value: $(params.one-pipeline-config)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-detect-secrets-status-pending
      runAfter:
        - code-fetch-code
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-detect-secrets
        - name: step-name
          value: detect-secrets
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-detect-secrets
      runAfter:
        - code-detect-secrets-status-pending
      taskRef:
        name: compliance-detect-secrets
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: app-directory
          value: $(tasks.code-fetch-code.results.directory-name)

    - name: code-detect-secrets-status-finished
      runAfter:
        - code-detect-secrets
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: $(tasks.code-detect-secrets.results.status)
        - name: task-name
          value: code-detect-secrets
        - name: step-name
          value: detect-secrets
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-setup-config
      runAfter:
        - code-normalize-config
      taskRef:
        name: parse-config
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: file
          value: $(tasks.code-clone-one-pipeline-config-repo.results.directory-name)/$(params.one-pipeline-config)
        - name: stage
          value: setup

    - name: code-setup
      taskRef:
        name: run-stage
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: image
          value: $(tasks.code-setup-config.results.image)
        - name: script
          value: $(tasks.code-setup-config.results.script)
        - name: working-dir
          value: $(tasks.code-clone-one-pipeline-config-repo.results.directory-name)
        - name: configmap-0
          value: $(tasks.code-setup-config.results.configmap-0)
        - name: configmap-1
          value: $(tasks.code-setup-config.results.configmap-1)
        - name: configmap-2
          value: $(tasks.code-setup-config.results.configmap-2)
        - name: configmap-3
          value: $(tasks.code-setup-config.results.configmap-3)
        - name: configmap-4
          value: $(tasks.code-setup-config.results.configmap-4)
        - name: secret-0
          value: $(tasks.code-setup-config.results.secret-0)
        - name: secret-1
          value: $(tasks.code-setup-config.results.secret-1)
        - name: secret-2
          value: $(tasks.code-setup-config.results.secret-2)
        - name: secret-3
          value: $(tasks.code-setup-config.results.secret-3)
        - name: secret-4
          value: $(tasks.code-setup-config.results.secret-4)
        - name: abort-on-failure
          value: $(tasks.code-setup-config.results.abort-on-failure)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests-status-pending
      runAfter:
        - code-fetch-code
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-unit-tests
        - name: step-name
          value: run-script
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests-config
      runAfter:
        - code-unit-tests-status-pending
        - code-setup
      taskRef:
        name: parse-config
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: file
          value: $(tasks.code-clone-one-pipeline-config-repo.results.directory-name)/$(params.one-pipeline-config)
        - name: stage
          value: test

    - name: code-unit-tests
      taskRef:
        name: run-stage
      workspaces:
        - name: app
          workspace: artifacts
      params:
        - name: image
          value: $(tasks.code-unit-tests-config.results.image)
        - name: script
          value: $(tasks.code-unit-tests-config.results.script)
        - name: working-dir
          value: $(tasks.code-clone-one-pipeline-config-repo.results.directory-name)
        - name: configmap-0
          value: $(tasks.code-unit-tests-config.results.configmap-0)
        - name: configmap-1
          value: $(tasks.code-unit-tests-config.results.configmap-1)
        - name: configmap-2
          value: $(tasks.code-unit-tests-config.results.configmap-2)
        - name: configmap-3
          value: $(tasks.code-unit-tests-config.results.configmap-3)
        - name: configmap-4
          value: $(tasks.code-unit-tests-config.results.configmap-4)
        - name: secret-0
          value: $(tasks.code-unit-tests-config.results.secret-0)
        - name: secret-1
          value: $(tasks.code-unit-tests-config.results.secret-1)
        - name: secret-2
          value: $(tasks.code-unit-tests-config.results.secret-2)
        - name: secret-3
          value: $(tasks.code-unit-tests-config.results.secret-3)
        - name: secret-4
          value: $(tasks.code-unit-tests-config.results.secret-4)
        - name: abort-on-failure
          value: $(tasks.code-unit-tests-config.results.abort-on-failure)
        - name: dind
          value: $(tasks.code-unit-tests-config.results.dind)
        - name: params
          value: |
            git-commit: $(tasks.code-fetch-code.results.git-commit)
            repository-url: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests-status-finished
      runAfter:
        - code-unit-tests
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: $(tasks.code-unit-tests.results.status)
        - name: task-name
          value: code-unit-tests
        - name: step-name
          value: run-script
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan-uploader
      runAfter:
        - code-fetch-code
        - code-unit-tests
      taskRef:
        name: cra-discovery
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.pr-repository)
        - name: revision
          value: $(params.branch)
        - name: commit-id
          value: $(params.commit-id)
        - name: commit-timestamp
          value: $(params.commit-timestamp)
        - name: directory-name
          value: $(tasks.code-fetch-code.results.directory-name)

    - name: code-vulnerability-scan-status-pending
      runAfter:
        - code-fetch-code
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-vulnerability-scan
        - name: step-name
          value: remediation
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan
      runAfter:
        - code-vulnerability-scan-uploader
      taskRef:
        name: cra-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: artifacts
        - name: secrets
          workspace: artifacts
      params:
        - name: repository
          value: $(params.pr-repository)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(params.commit-id)

    - name: code-vulnerability-scan-status-finished
      runAfter:
        - code-vulnerability-scan
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: "$(tasks.code-vulnerability-scan.results.status)"
        - name: task-name
          value: code-vulnerability-scan
        - name: step-name
          value: remediation
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check-status-pending
      runAfter:
        - code-fetch-code
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-cis-check
        - name: step-name
          value: cis
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check
      taskRef:
        name: cra-cis-check
      runAfter:
        - code-cis-check-status-pending
      workspaces:
        - name: secrets
          workspace: artifacts
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.pr-repository)
        - name: revision
          value: $(params.branch)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(params.commit-id)
        - name: directory-name
          value: $(tasks.code-fetch-code.results.directory-name)

    - name: code-cis-check-status-finished
      runAfter:
        - code-cis-check
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: "$(tasks.code-cis-check.results.status)"
        - name: task-name
          value: code-cis-check
        - name: step-name
          value: cis
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-status-pending
      runAfter:
        - code-unit-tests-status-finished
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-branch-protection
        - name: step-name
          value: check-github-statuses
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection
      runAfter:
        - code-branch-protection-status-pending
      taskRef:
        name: github-check-statuses
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: target-branch
          value: $(params.target-branch)
        - name: required-checks
          value: |
            [{
              "type": "branch-protection",
              "name": "code-review",
              "params": {
                "checks": [
                  "tekton/code-branch-protection",
                  "tekton/code-unit-tests",
                  "tekton/code-cis-check",
                  "tekton/code-vulnerability-scan",
                  "tekton/code-detect-secrets"
                ]
              }
            }]
        - name: gh-org
          value: $(tasks.get-org.results.gh-org)
        - name: repository
          value: $(tasks.code-fetch-credentials.results.repo-name)
        - name: git-commit
          value: $(params.commit-id)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-status-finished
      runAfter:
        - code-branch-protection
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: git-token
        - name: repo-url
          value: $(tasks.code-setup-pipeline-env.results.repository-url)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: $(tasks.code-branch-protection.results.status)
        - name: task-name
          value: code-branch-protection
        - name: step-name
          value: check-github-statuses
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-notify-pipeline-end
      when:
        - input: $(params.slack-notifications)
          operator: in
          values: ["1"]
      runAfter:
        - code-branch-protection
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import json, os

              results = json.loads("""
                [
                  {
                    "name": "code-unit-tests",
                    "expected": "success",
                    "actual": "$(tasks.code-unit-tests.results.status)"
                  },
                  {
                    "name": "code-branch-protection",
                    "expected": "success",
                    "actual": "$(tasks.code-branch-protection.results.status)"
                  },
                  {
                    "name": "code-vulnerability-scan",
                    "expected": "success",
                    "actual": "$(tasks.code-vulnerability-scan.results.status)"
                  },
                  {
                    "name": "code-cis-check",
                    "expected": "success",
                    "actual": "$(tasks.code-cis-check.results.status)"
                  }
                ]
              """)
              for result in results:
                if result["actual"] != result["expected"]:
                  print(":x: Task `{taskName}` has failed.".format(taskName=result["name"]))
                else:
                  print(":white_check_mark: Task `{taskName}` was successful.".format(taskName=result["name"]))
              print("PR Pipeline finished!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + " | See the Pipeline Logs>")

    - name: code-pipeline-evaluator
      runAfter:
        - code-branch-protection-status-finished
      taskRef:
        name: pipeline-evaluate
      params:
        - name: results
          value: |
            [
              {
                "name": "code-unit-tests",
                "expected": "success",
                "actual": "$(tasks.code-unit-tests.results.status)"
              },
              {
                "name": "code-branch-protection",
                "expected": "success",
                "actual": "$(tasks.code-branch-protection.results.status)"
              },
              {
                "name": "code-vulnerability-scan",
                "expected": "success",
                "actual": "$(tasks.code-vulnerability-scan.results.status)"
              },
              {
                "name": "code-cis-check",
                "expected": "success",
                "actual": "$(tasks.code-cis-check.results.status)"
              },
              {
                "name": "code-detect-secrets",
                "expected": "success",
                "actual": "$(tasks.code-detect-secrets.results.status)"
              }
            ]
