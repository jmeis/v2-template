---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pr-pipeline
spec:
  params:
    - name: repository
      description: the git repo
    - name: branch
      description: branch
    - name: target-branch
      description: target branch
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: repository-integration
      description: the repo integration name
    - name: commit-id
      description: commit id
    - name: pipeline-debug
      description: toggles debug mode for the pipeline
    - name: slack-notifications
      description: toggles slack notifications
    - name: pr-url
      description: pr url

  workspaces:
    - name: artifacts

  tasks:
    - name: code-notify-pipeline-start
      conditions:
        - conditionRef: util-is-equal
          params:
            - name: left
              value: $(params.slack-notifications)
            - name: right
              value: "1"
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3
              import os

              print("PR Pipeline was Triggered By: " + os.getenv("TRIGGERED_BY"))
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")

    - name: code-fetch-credentials
      taskRef:
        name: git-get-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: ibmcloud-api-key
          value: $(params.api-key)
        - name: repository-integration
          value: $(params.repository-integration)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-setup-set-status
      runAfter:
        - code-fetch-credentials
      workspaces:
        - name: artifacts
          workspace: artifacts
      taskSpec:
        steps:
          - name: save-git-token-to-file
            image: ibmcom/pipeline-base-image:2.6
            workingDir: "/artifacts"
            command: ["/bin/bash", "-c"]
            args:
              - |
                #!/bin/bash
                set -e -o pipefail
                pwd
                env
                trap env EXIT
                set -x
                source ./build.properties
                echo -n $GIT_TOKEN > ./github-token
        workspaces:
          - name: artifacts
            mountPath: /artifacts

    - name: code-fetch-code
      runAfter:
        - code-fetch-credentials
      taskRef:
        name: git-clone
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: branch
          value: $(params.branch)
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan-uploader
      runAfter:
        - code-fetch-code
      taskRef:
        name: gitsecure-discovery
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: commit-id
          value: $(params.commit-id)

    - name: code-vulnerability-scan-status-pending
      runAfter:
        - code-fetch-code
        - code-setup-set-status
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-vulnerability-scan
        - name: step-name
          value: remediation
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-vulnerability-scan
      runAfter:
        - code-vulnerability-scan-uploader
      taskRef:
        name: gitsecure-vulnerability-remediation
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: api-key
          value: $(params.api-key)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(params.commit-id)

    - name: code-vulnerability-scan-status-finished
      runAfter:
        - code-vulnerability-scan
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: "$(tasks.code-vulnerability-scan.results.status)"
        - name: task-name
          value: code-vulnerability-scan
        - name: step-name
          value: remediation
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check-status-pending
      runAfter:
        - code-fetch-code
        - code-setup-set-status
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-cis-check
        - name: step-name
          value: cis
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-cis-check
      taskRef:
        name: gitsecure-cis-check
      runAfter:
        - code-vulnerability-scan
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.branch)
        - name: api-key
          value: $(params.api-key)
        - name: pr-url
          value: $(params.pr-url)
        - name: commit-id
          value: $(params.commit-id)

    - name: code-cis-check-status-finished
      runAfter:
        - code-cis-check
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: "$(tasks.code-cis-check.results.status)"
        - name: task-name
          value: code-cis-check
        - name: step-name
          value: cis
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests-status-pending
      runAfter:
        - code-setup-set-status
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-unit-tests
        - name: step-name
          value: run-script
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests
      runAfter:
        - code-unit-tests-status-pending
        - code-fetch-code
      taskRef:
        name: util-run
      workspaces:
        - name: scripts
          workspace: artifacts
      params:
        - name: script
          value: . /root/.nvm/nvm.sh && cd /scripts/$(echo $(params.repository) | sed -E "s/(.*)(\/)//") && npm ci -q && npm run test
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-unit-tests-status-finished
      runAfter:
        - code-unit-tests
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: $(tasks.code-unit-tests.results.status)
        - name: task-name
          value: code-unit-tests
        - name: step-name
          value: run-script
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-status-pending
      runAfter:
        - code-unit-tests-status-finished
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: pending
        - name: task-name
          value: code-branch-protection
        - name: step-name
          value: check-github-statuses
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection
      runAfter:
        - code-branch-protection-status-pending
      taskRef:
        name: compliance-check-github-statuses
      workspaces:
        - name: artifacts
          workspace: artifacts
      params:
        - name: target-branch
          value: $(params.target-branch)
        - name: required-checks
          value: |
            [{
              "type": "branch-protection",
              "name": "code-review",
              "params": {
                "checks": [
                  "tekton/code-branch-protection",
                  "tekton/code-unit-tests",
                  "tekton/code-cis-check",
                  "tekton/code-vulnerability-scan"
                ]
              }
            }]
        - name: collect-evidence
          value: "false"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-branch-protection-status-finished
      runAfter:
        - code-branch-protection
      taskRef:
        name: github-set-status
      workspaces:
        - name: secrets
          workspace: artifacts
      params:
        - name: secret-name
          value: github-token
        - name: repo-url
          value: $(params.repository)
        - name: commit-sha
          value: $(params.commit-id)
        - name: state
          value: $(tasks.code-branch-protection.results.status)
        - name: task-name
          value: code-branch-protection
        - name: step-name
          value: check-github-statuses
        - name: description
          value: "Tekton PR Pipeline Status"
        - name: pipeline-debug
          value: $(params.pipeline-debug)

    - name: code-notify-pipeline-end
      conditions:
        - conditionRef: util-is-equal
          params:
            - name: left
              value: $(params.slack-notifications)
            - name: right
              value: "1"
      runAfter:
        - code-branch-protection
      taskRef:
        name: slack-post-message
      workspaces:
        - name: workspace
          workspace: artifacts
      params:
        - name: message-script
          value: |
              #!/usr/bin/env python3

              import json, os

              results = json.loads("""
                [
                  {
                    "name": "code-unit-tests",
                    "expected": "success",
                    "actual": "$(tasks.code-unit-tests.results.status)"
                  },
                  {
                    "name": "code-branch-protection",
                    "expected": "success",
                    "actual": "$(tasks.code-branch-protection.results.status)"
                  },
                  {
                    "name": "code-vulnerability-scan",
                    "expected": "success",
                    "actual": "$(tasks.code-vulnerability-scan.results.status)"
                  },
                  {
                    "name": "code-cis-check",
                    "expected": "success",
                    "actual": "$(tasks.code-cis-check.results.status)"
                  }
                ]
              """)

              for result in results:
                if result["actual"] != result["expected"]:
                  print(":x: Task `{taskName}` has failed.".format(taskName=result["name"]))
                else:
                  print(":white_check_mark: Task `{taskName}` was successful.".format(taskName=result["name"]))
              print("PR Pipeline finished!")
              print("<https://cloud.ibm.com/devops/pipelines/tekton/" + os.getenv("PIPELINE_ID") + "/runs/" + os.getenv("PIPELINE_RUN_ID") + "?env_id=ibm:yp:" + os.getenv("TOOLCHAIN_REGION") + "|See the Pipeline Logs>")

    - name: code-pipeline-evaluator
      runAfter:
        - code-branch-protection-status-finished
      taskRef:
        name: util-evaluate-pipeline-results
      params:
        - name: results
          value: |
            [
              {
                "name": "code-unit-tests",
                "expected": "success",
                "actual": "$(tasks.code-unit-tests.results.status)"
              },
              {
                "name": "code-branch-protection",
                "expected": "success",
                "actual": "$(tasks.code-branch-protection.results.status)"
              },
              {
                "name": "code-vulnerability-scan",
                "expected": "success",
                "actual": "$(tasks.code-vulnerability-scan.results.status)"
              },
              {
                "name": "code-cis-check",
                "expected": "success",
                "actual": "$(tasks.code-cis-check.results.status)"
              }
            ]
