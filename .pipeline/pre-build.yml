---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pre-build-task
spec:
  inputs:
    params:
    - name: task-pvc
      description: pipeline pvc name place holder
    - name: pipeline-id
      description: id of the pipeline run
    - name: registry-namespace
      description: The namespace in the container image registry. You can set it up
        with {bx cr namespace-add]. Learn more at https://cloud.ibm.com/docs/services/Registry?topic=registry-getting-started#getting-started.
    - name: build-cluster-namespace
      description: Cluster namespace
    - name: build-cluster-name
      description: Build Cluster
    - name: repo
      description: GIT_REPO
    - name: prod-cluster-namespace
      description: Cluster namespace
    - name: build-region
      description: Build region
    - name: vault_name
      description: Specify the Key Protect instance name, where the image signing
        keys have been stored. The build and validation signer fields contain default
        names for these signers. The values must match the values created in the Key-Management-Admin-Template.
        See https://github.com/open-toolchain/key-management-admin-toolchain
    - name: repository
      description: The git repo
    - name: prod-region
      description: Cluster region
    - name: app-name
      description: The name of your app
    - name: revision
      description: the branch for the git repo
    - name: prod-cluster-name
      description: Cluster name
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: prod-resource-group
      description: Resource Group
    - name: build-resource-group
      description: Build Resource Group
    - name: validation_signer
      description: VALIDATION_SIGNER
    - name: build_signer
      description: BUILD_SIGNER
    - name: evidence-locker
      description: evidence locker for the app
  steps:
  - name: unit-tests
    image: ibmcom/pipeline-base-image:latest
    env:
    - name: VAULT_INSTANCE
      value: $(inputs.params.vault_name)
    - name: VALIDATION_SIGNER
      value: $(inputs.params.validation_signer)
    - name: BUILD_REGION_ID
      value: $(inputs.params.prod-region)
    - name: REGISTRY_REGION_ID
      value: $(inputs.params.registry-region)
    - name: BUILD_RESOURCE_GROUP
      value: $(inputs.params.prod-resource-group)
    - name: BUILD_CLUSTER_NAMESPACE
      value: $(inputs.params.build-cluster-namespace)
    - name: APP_NAME
      value: $(inputs.params.app-name)
    - name: REGISTRY_NAMESPACE
      value: $(inputs.params.registry-namespace)
    - name: GIT_REPO
      value: $(inputs.params.repo)
    - name: PROD_CLUSTER_NAMESPACE
      value: $(inputs.params.prod-cluster-namespace)
    - name: API_KEY
      value: $(inputs.params.api-key)
    - name: PROD_CLUSTER_NAME
      value: $(inputs.params.prod-cluster-name)
    - name: PROD_RESOURCE_GROUP
      value: $(inputs.params.prod-resource-group)
    - name: BUILD_CLUSTER_NAME
      value: $(inputs.params.prod-cluster-name)
    - name: BUILD_SIGNER
      value: $(inputs.params.build_signer)
    - name: PROD_REGION_ID
      value: $(inputs.params.prod-region)
    - name: EVIDENCE_LOCKER_REPO
      value: $(inputs.params.evidence-locker)
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      # GIT_URL=$(echo "https://github.ibm.com/padraic-edwards/${app-name}.git" | sed -e "s/:\/\//:\/\/padraic-edwards:$GHE_TOKEN@/g")
      # echo $GIT_URL
      # git clone $GIT_URL .

      function set-status() {
        local repo=$1
        local state=$2
        local context=$3
        local description=$4
        local body="{\"state\": \"$state\", \"target_url\": \"$JOB_URL\", \"description\": \"$description\", \"context\": \"$context\"}"

        curl "https://github.ibm.com/api/v3/repos/$repo/statuses/$GIT_COMMIT" \
          -H "Authorization: Bearer $GHE_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$body"
      }

      set -x
      echo "RUNNING"

      TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
      OWNER_ID=$(jq -r '.services[] | select(.parameters.repo_name=="'"$APP_NAME"'") | .parameters.owner_id' /cd-config/toolchain.json)
      ibmcloud login -r $TOOLCHAIN_REGION --apikey $API_KEY
      TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
      source /artifacts/build.properties
      PIPELINE_RUN_ID=$(inputs.params.pipeline-id)
      PIPELINE_ID=$(jq -r '.services[] | select(.service_id=="pipeline") | .instance_id' /cd-config/toolchain.json)
      PIPELINE_REGION=$(jq -r '.services[] | select(.service_id=="pipeline") | .region_id' /cd-config/toolchain.json)
      JOB_URL="https://cloud.ibm.com/devops/pipelines/tekton/$PIPELINE_ID/runs/$PIPELINE_RUN_ID?env_id=$PIPELINE_REGION"

      set -e -o pipefail
      export HOME=/root && source ~/.nvm/nvm.sh

      echo "Cloning ${app-name}"
      echo "Cloning 1 ${REPO}"
      echo "Cloning ${GIT_URL}"
      git clone ${GIT_URL}
      cd ${REPO}

      set-status $OWNER_ID/$APP_NAME pending tekton/ci-unit-tests
      npm install --save-dev start-server-and-test
      npm install
      npm run ci

      cat report
      set-status $OWNER_ID/$APP_NAME success tekton/ci-unit-tests
    volumeMounts:
    - mountPath: /artifacts
      name: task-volume
    - mountPath: /cd-config
      name: cd-config-volume
    - mountPath: /steps
      name: steps-volume
  - name: collect-unit-test-evidence
    image: ibmcom/pipeline-base-image
    env:
      - name: REQUIRED_CHECKS
        value: |
          [{
            "type": "status",
            "name": "unit-test",
            "params": {
              "name": "tekton/ci-unit-tests"
            }
          }]
      - name: PIPELINE_RUN_ID
        value: $(inputs.params.pipeline-id)
      - name: EVIDENCE_LOCKER_REPO
        value: $(inputs.params.evidence-locker)
      - name: GHE_REPO
        value: $(inputs.params.app-name)
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      export HOME=/root && source ~/.nvm/nvm.sh
      set -x
      source /artifacts/build.properties
      PIPELINE_ID=$(jq -r '.services[] | select(.service_id=="pipeline") | .instance_id' /cd-config/toolchain.json)
      PIPELINE_REGION=$(jq -r '.services[] | select(.service_id=="pipeline") | .region_id' /cd-config/toolchain.json)
      JOB_URL="https://cloud.ibm.com/devops/pipelines/tekton/$PIPELINE_ID/runs/$PIPELINE_RUN_ID?env_id=$PIPELINE_REGION"
      export GHE_ORG=$(jq -r '.services[] | select(.parameters.repo_name=="'"$GHE_REPO"'") | .parameters.owner_id' /cd-config/toolchain.json)
      export GIT_BRANCH=$GIT_BRANCH
      export GIT_COMMIT=$GIT_COMMIT
      export GHE_TOKEN=$GHE_TOKEN

      function set-status() {
        local repo=$1
        local state=$2
        local context=$3
        local description=$4
        local body="{\"state\": \"$state\", \"target_url\": \"$JOB_URL\", \"description\": \"$description\", \"context\": \"$context\"}"

        curl "https://github.ibm.com/api/v3/repos/$repo/statuses/$GIT_COMMIT" \
          -H "Authorization: Bearer $GHE_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$body"
      }

      set-status $GHE_ORG/$GHE_REPO pending tekton/ci-compliance
      git clone https://${GHE_TOKEN}@github.ibm.com/cocoa/scripts.git
      cd scripts
      npm ci
      npx tsc
      node build/check-pr-status
      set-status $GHE_ORG/$GHE_REPO success tekton/ci-compliance
    volumeMounts:
    - mountPath: /artifacts
      name: task-volume
    - mountPath: /cd-config
      name: cd-config-volume
  - name: dependency-analysis-placeholder
    image: ibmcom/pipeline-base-image:latest
    env:
    - name: REPOSITORY
      value: $(inputs.params.repository)
    - name: REVISION
      value: $(inputs.params.revision)
    command: ["/bin/sh", "-c"]
    args:
    - |
      #!/bin/bash
      echo "RUNNING Dependency Analysis"
  volumes:
  - name: task-volume
    persistentVolumeClaim:
      claimName: $(inputs.params.task-pvc)
  - name: steps-volume
  - name: cd-config-volume
    configMap:
      name: toolchain
      items:
      - key: toolchain.json
        path: toolchain.json
