---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: pipeline
spec:
  params:
  - name: pipeline-pvc
    description: pipeline pvc name place holder
  - name: pipelineRunId
    description: pipelineRunId unique ID
  - name: registry-namespace
    description: The namespace in the container image registry. You can set it up
      with {bx cr namespace-add]. Learn more at https://cloud.ibm.com/docs/services/Registry?topic=registry-getting-started#getting-started.
  - name: repo
    description: GIT_REPO
  - name: repository
    description: The git repo
  - name: app-name
    description: The name of your app
  - name: revision
    description: the branch for the git repo
  - name: registry-region
    description: The IBM Cloud region for image registry
  - name: api-key
    description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
      Service API and interact with the cluster. You can obtain your API key with
      'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
      by clicking **Create API key** (Each API key only can be viewed once).
  - name: branch
    description: the branch for the git repo
  - name: cluster-name
    description: the name of the cluster to target
  resources:
  - name: app-image
    type: image
  - name: target-cluster
    type: cluster
  tasks:
    - name: fetch-code
      taskRef:
        name: clone-repo-task
      params:
      - name: task-pvc
        value: $(params.pipeline-pvc)
      - name: repository
        value: $(params.repository)
      - name: branch
        value: $(params.branch)
    - name: unit-tests
      runAfter: [fetch-code]
      taskRef:
        name: unit-tests-task
      params:
      - name: task-pvc
        value: $(params.pipeline-pvc)
      - name: pipelineRunId
        value: $(params.pipelineRunId)
      - name: context
        value: tekton/ci-unit-tests
    - name: check-github-statuses
      runAfter: [unit-tests]
      taskRef:
        name: check-github-statuses-task
      params:
      - name: task-pvc
        value: $(params.pipeline-pvc)
      - name: pipelineRunId
        value: $(params.pipelineRunId)
      - name: target-branch
        value: $(params.branch)
      - name: requiredChecks
        value: |
         [{
           "type": "status",
           "name": "unit-test",
           "params": {
             "name": "tekton/ci-unit-tests"
           }
         }]
      - name: context
        value: tekton/ci-compliance
    - name: containerize
      runAfter: [check-github-statuses]
      taskRef:
        name: containerize-task
      params:
      - name: task-pvc
        value: $(params.pipeline-pvc)
      - name: additionalTagsScript
        value: |
          # Include the clone task output variables in the environment
          source /artifacts/build.properties
          # The script is providing tag(s) as output
          # But logs can be written as error stderr
          echo "Providing an image tag including git branch and commit" >&2
          # Add a specific tag with branch and commit
          echo "${BUILD_TIMESTAMP}-${GIT_BRANCH}-${GIT_COMMIT}"
      resources:
        outputs:
          - name: builtImage
            resource: app-image
    - name: vulnerability-advisor
      taskRef:
        name: vulnerability-advisor-task
      params:
        - name: task-pvc
          value: $(params.pipeline-pvc)
        - name: scanReportFile
          value: 'app-image-va-report.json'
        # - name: maxIteration
        #   value: '5'
        # - name: sleepTime
        #   value: '3'
        # - name: failOnScannedIssues
        #   value: 'false'
      resources:
        inputs:
          - name: image
            resource: app-image
            from:
              - containerize
    - name: additional-image-checks
      taskRef:
        name: additional-image-checks-task
      runAfter: [vulnerability-advisor]
      params:
    - name: cis-benchmarks
      taskRef:
        name: cis-benchmarks-task
      runAfter: [vulnerability-advisor]
      params:
    - name: oss-licence-check
      taskRef:
        name: oss-licence-check-task
      runAfter: [vulnerability-advisor]
      params:
    - name: fetch-iks-cluster-config
      runAfter: [oss-licence-check]
      taskRef:
        name: fetch-iks-cluster-config
      params:
        - name: task-pvc
          value: $(params.pipeline-pvc)
        - name: clusterPipelineResourcesDirectoryFallback
          value: .tekton-clusters
      resources:
        inputs:
          - name: cluster
            resource: target-cluster
        outputs:
          - name: cluster
            resource: target-cluster
    - name: pipeline-1-kubectl-task
      runAfter: [fetch-iks-cluster-config]
      taskRef:
        name: kubernetes-contextual-execution
      params:
        - name: task-pvc
          value: $(params.pipeline-pvc)
        - name: task-pvc-mountpath
          value: /pipelinerun
        - name: clusterPipelineResourcesDirectory
          value: /pipelinerun/.tekton-clusters
        - name: script
          value: |
            echo "** Here is the kubectl version:"
            kubectl version
            echo "** Here is the kubectl cluster-info:"
            kubectl cluster-info
            echo "** Here are the kubectl namespaces:"
            kubectl get namespaces
      resources:
        inputs:
          - name: cluster
            resource: target-cluster
            from:
              - fetch-iks-cluster-config

    - name: deploy-dev
      taskRef:
        name: deploy-to-cluster
      runAfter: [pipeline-1-kubectl-task]
      params:
      - name: task-pvc
        value: $(params.pipeline-pvc)
      - name: repository
        value: $(params.repository)
      - name: revision
        value: $(params.revision)
      - name: cluster-name
        value: $(params.cluster-name)
      - name: registry-namespace
        value: $(params.registry-namespace)
      - name: registry-region
        value: $(params.registry-region)
      - name: ibmcloud-api-key
        value: $(params.api-key)
      - name: allow-create-route
        value: "true"
