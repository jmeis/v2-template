---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: evidence-collector-task
spec:
  inputs:
    params:
    - name: task-pvc
      description: pipeline pvc name place holder
    - name: evidence-locker
      description: evidence locker for the app
    - name: pipeline-id
      description: id of the pipeline run
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
  steps:
  - name: collect-evidence
    image: ibmcom/pipeline-base-image:latest
    env:
    - name: EVIDENCE_LOCKER_REPO
      value: $(inputs.params.evidence-locker)
    - name: PIPELINE_RUN_ID
      value: $(inputs.params.pipeline-id)
    - name: API_KEY
      value: $(inputs.params.api-key)
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      source /artifacts/build.properties
      set -x
      echo "RUNNING EVIDENCE LOCKER"
      TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
      ibmcloud login -r $TOOLCHAIN_REGION --apikey $API_KEY
      TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
      source /artifacts/build.properties
      PIPELINE_RUN_ID=$(inputs.params.pipeline-id)

      function collect-evidence () {
        set -e
        local evidence_name=$1
        local evidence_status=$2
        local evidence_details=$3
        local evidence_path="raw/ci/${PIPELINE_RUN_ID}/${evidence_name}.json"
        local content="{ \"commit_sha\": \"$GIT_COMMIT\", \"status\": \"$evidence_status\", \"details\": \"$evidence_details\", \"job_id\": \"$PIPELINE_RUN_ID\" }"
        echo $content $evidence_path
        local encoded_content=$(echo "$content" | base64 -w 0)

        if [ -z "$evidence_name" ]; then
          echo "Evidence name must be provided"
          return 1
        fi

        if [ -z "$evidence_status" ]; then
          echo "Evidence status must be provided"
          return 1
        fi

        if [ -z "$evidence_details" ]; then
          echo "Evidence details must be provided"
          return 1
        fi

        if [ -z "$PIPELINE_RUN_ID" ]; then
          echo "PIPELINE_RUN_ID must be provided"
          return 1
        fi

        if [ -z "$GIT_COMMIT" ]; then
          echo "GIT_COMMIT must be provided"
          return 1
        fi

        if [ -z "$EVIDENCE_LOCKER_REPO" ]; then
          echo "EVIDENCE_LOCKER_REPO must be provided"
          return 1
        fi

        if [ -z "$GHE_TOKEN" ]; then
          echo "GHE_TOKEN must be provided"
          return 1
        fi

        echo "Uploading evidence ${evidence_name} for job ${PIPELINE_RUN_ID}"

        curl https://github.ibm.com/api/v3/repos/${EVIDENCE_LOCKER_REPO}/contents/${evidence_path} \
          -d "{\"content\":\"${encoded_content}\",\"message\":\"Upload ${evidence_name} for ${PIPELINE_RUN_ID}\"}" \
          -H "Authorization: Bearer ${GHE_TOKEN}" \
          -H "Content-Type: application/json" \
          -X PUT
      }

      collect-evidence unit-tests passed http://example.com
    volumeMounts:
    - mountPath: /artifacts
      name: task-volume
    - mountPath: /cd-config
      name: cd-config-volume
  volumes:
  - name: task-volume
    persistentVolumeClaim:
      claimName: $(inputs.params.task-pvc)
  - name: cd-config-volume
    configMap:
      name: toolchain
      items:
      - key: toolchain.json
        path: toolchain.json
