---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: deploy-dev-task
spec:
  inputs:
    params:
    - name: task-pvc
      description: pipeline pvc name place holder
    - name: registry-namespace
      description: The namespace in the container image registry. You can set it up
        with {bx cr namespace-add]. Learn more at https://cloud.ibm.com/docs/services/Registry?topic=registry-getting-started#getting-started.
    - name: repo
      description: GIT_REPO
    - name: build-region
      description: Build region
    - name: vault_name
      description: Specify the Key Protect instance name, where the image signing
        keys have been stored. The build and validation signer fields contain default
        names for these signers. The values must match the values created in the Key-Management-Admin-Template.
        See https://github.com/open-toolchain/key-management-admin-toolchain
    - name: repository
      description: The git repo
    - name: prod-region
      description: Cluster region
    - name: app-name
      description: The name of your app
    - name: revision
      description: the branch for the git repo
    - name: clusterName
      description: Cluster name
    - name: registry-region
      description: The IBM Cloud region for image registry
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'bx iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: api
      description: the ibmcloud api endpoint
      default: "https://cloud.ibm.com"
    - name: deployment-file
      default: deployment.yml
  steps:
  - name: clone-repo
    image: alpine/git
    env:
    - name: REPOSITORY
      value: $(inputs.params.repository)
    - name: REVISION
      value: $(inputs.params.revision)
    command: ["/bin/sh", "-c"]
    args:
    - set -e -o pipefail;
    volumeMounts:
    - mountPath: /artifacts
      name: task-volume
  - name: deploy-to-kubernetes
    image: ibmcom/pipeline-base-image
    env:
    - name: IBMCLOUD_API_KEY
      value: $(inputs.params.api-key)
    - name: API
      value: $(inputs.params.api)
    - name: REGION
      value: $(inputs.params.registry-region)
    - name: HOME
      value: "/root"
    - name: DEPLOYMENT_FILE
      value: $(inputs.params.deployment-file)
    - name: CLUSTER_NAMESPACE
      value: "default"
    - name: PIPELINE_KUBERNETES_CLUSTER_NAME
      value: $(inputs.params.clusterName)
    - name: DEPLOYMENT_FILE
      value: "/artifacts/deployment.yml"
    command: ["/bin/bash", "-c"]
    args:
      - set -e -o pipefail;
        source /artifacts/build.properties;
        IMAGE_TAG=$IMAGE_TAGS;
        ibmcloud login -a $API -r $REGION;
        $(ibmcloud ks cluster config --cluster "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --export);
        if which oc > /dev/null && ibmcloud ks cluster get "${PIPELINE_KUBERNETES_CLUSTER_NAME}" --json | jq -e '.type=="openshift"' > /dev/null; then oc login -u apikey -p "${IBMCLOUD_API_KEY}" ; fi;
        while read line; do export $line; done < /artifacts/build.properties;
        cp /artifacts/build.properties .;
        source <(curl -sSL "https://raw.githubusercontent.com/huayuenh/tekton-common-scripts/master/deploy-to-kubernetes.sh");
    volumeMounts:
      - mountPath: /artifacts
        name: task-volume
  - name: check-health
    image: ibmcom/pipeline-base-image:latest
    env:
    command: ["/bin/bash", "-c"]
    args:
    - |
      #!/bin/bash
      echo "RUNNING"
    volumeMounts:
    - mountPath: /artifacts
      name: task-volume
  volumes:
  - name: task-volume
    persistentVolumeClaim:
      claimName: $(inputs.params.task-pvc)