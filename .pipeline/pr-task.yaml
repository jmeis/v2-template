apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: pr-task
spec:
  inputs:
    params:
      - name: pipelineRunId
        description: pipelineRunId unique id
      - name: target-branch
        description: target branch
      - name: task-pvc
        description: the output pvc - this is where the cloned repository will be stored
  steps:
    - name: unit-tests
      image: ibmcom/pipeline-base-image:latest
      env:
        - name: PIPELINE_RUN_ID
          value: $(inputs.params.pipelineRunId)
      command: ["/bin/bash", "-c"]
      args:
        - |
          . /root/.nvm/nvm.sh

          function set-status() {
            local repo=$1
            local state=$2
            local context=$3
            local description=$4
            local body="{\"state\": \"$state\", \"target_url\": \"$JOB_URL\", \"description\": \"$description\", \"context\": \"$context\"}"

            curl "https://github.ibm.com/api/v3/repos/$repo/statuses/$GIT_COMMIT" \
              -H "Authorization: Bearer $GHE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$body"
          }

          source /artifacts/build.properties

          GH_ORG=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.owner_id' /cd-config/toolchain.json)
          PIPELINE_ID=$(jq -r '.services[] | select(.service_id=="pipeline") | .instance_id' /cd-config/toolchain.json)
          PIPELINE_REGION=$(jq -r '.services[] | select(.service_id=="pipeline") | .region_id' /cd-config/toolchain.json)
          JOB_URL="https://cloud.ibm.com/devops/pipelines/tekton/$PIPELINE_ID/runs/$PIPELINE_RUN_ID?env_id=$PIPELINE_REGION"

          set-status $GH_ORG/$REPO pending tekton/pr-unit-tests

          cd /artifacts
          npm ci

          if npm test; then
            set-status $GH_ORG/$REPO success tekton/pr-unit-tests
          else
            set-status $GH_ORG/$REPO failure tekton/pr-unit-tests
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /cd-config
          name: cd-config-volume
    - name: check-compliance
      image: ibmcom/pipeline-base-image:latest
      env:
        - name: PIPELINE_RUN_ID
          value: $(inputs.params.pipelineRunId)
        - name: TARGET_BRANCH
          value: $(inputs.params.target-branch)
        - name: REQUIRED_CHECKS
          value: |
            [{
              "type": "check-run",
              "name": "secret-detection",
              "params": {
                "name": "whitewater-detect-secrets"
              }
            }, {
              "type": "branch-protection",
              "name": "code-review",
              "params": {
                "checks": [
                  "whitewater-detect-secrets",
                  "tekton/pr-compliance"
                ]
              }
            }, {
              "type": "status",
              "name": "unit-tests",
              "params": {
                "name": "tekton/pr-unit-tests"
              }
            }]
      command: ["/bin/bash", "-c"]
      args:
        - |
          . /root/.nvm/nvm.sh
          function set-status() {
            local repo=$1
            local state=$2
            local context=$3
            local description=$4
            local body="{\"state\": \"$state\", \"target_url\": \"$JOB_URL\", \"description\": \"$description\", \"context\": \"$context\"}"

            curl "https://github.ibm.com/api/v3/repos/$repo/statuses/$GIT_COMMIT" \
              -H "Authorization: Bearer $GHE_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$body"
          }

          source /artifacts/build.properties

          GH_ORG=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.owner_id' /cd-config/toolchain.json)
          PIPELINE_ID=$(jq -r '.services[] | select(.service_id=="pipeline") | .instance_id' /cd-config/toolchain.json)
          PIPELINE_REGION=$(jq -r '.services[] | select(.service_id=="pipeline") | .region_id' /cd-config/toolchain.json)
          JOB_URL="https://cloud.ibm.com/devops/pipelines/tekton/$PIPELINE_ID/runs/$PIPELINE_RUN_ID?env_id=$PIPELINE_REGION"
          set-status $GH_ORG/$REPO pending tekton/pr-compliance

          echo "Cloning scripts..."
          git clone https://${GHE_TOKEN}@github.ibm.com/cocoa/scripts.git
          cd scripts
          npm install
          npx tsc
          export GHE_TOKEN=$GHE_TOKEN
          export GHE_ORG=$GH_ORG
          export GHE_REPO=$REPO
          export GIT_COMMIT=$GIT_COMMIT
          export GIT_BRANCH=$GIT_BRANCH
          export EVIDENCE_LOCKER_REPO=$(jq -r '.services[] | select(.toolchain_binding.name=="evidence-repo") | .parameters.owner_id + "/" + .parameters.repo_name' /cd-config/toolchain.json)
          export GIT_BRANCH=$TARGET_BRANCH
          if node build/check-pr-status; then
            set-status $GH_ORG/$REPO success tekton/pr-compliance
          else
            set-status $GH_ORG/$REPO failure tekton/pr-compliance
            exit 1
          fi
      volumeMounts:
        - mountPath: /artifacts
          name: task-volume
        - mountPath: /cd-config
          name: cd-config-volume
  volumes:
    - name: task-volume
      persistentVolumeClaim:
        claimName: $(inputs.params.task-pvc)
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
        - key: toolchain.json
          path: toolchain.json
